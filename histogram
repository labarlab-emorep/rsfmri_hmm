# %%
import matplotlib.pyplot as plt

# Example sequence of string-valued discrete states (replace this with your data)
sequence = ['A', 'B', 'C', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'E', 'D', 'C', 'B', 'A']

# Create a mapping from string values to numerical categories
categories = {val: idx for idx, val in enumerate(sorted(set(sequence)))}

# Convert string values to numerical categories
numerical_sequence = [categories[val] for val in sequence]

# Plotting a histogram for the numerical sequence of discrete states
plt.hist(numerical_sequence, bins=len(categories), align='left', rwidth=0.8)

# Customize the plot labels and title
plt.xlabel('Discrete States')
plt.ylabel('Frequency')
plt.title('Histogram of Discrete States')

# Set x-axis labels using the original string values
plt.xticks(range(len(categories)), categories.keys())

# Show the histogram
plt.show()


# %%
import matplotlib.pyplot as plt
import numpy as np

# Example sequence of string-valued discrete states (replace this with your data)
sequence = ['A', 'B', 'C', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'E', 'D', 'C', 'B', 'A']

# Create a mapping from string values to numerical categories
categories = {val: idx for idx, val in enumerate(sorted(set(sequence)))}

# Convert string values to numerical categories
numerical_sequence = np.array([categories[val] for val in sequence])

# Get unique numerical categories and their counts
unique_categories, counts = np.unique(numerical_sequence, return_counts=True)

# Define colors for each category
colors = ['red', 'green', 'blue', 'orange', 'purple'][:len(unique_categories)]

# Plotting a histogram for each category with different colors
plt.figure(figsize=(8, 6))
for category, count, color in zip(unique_categories, counts, colors):
    plt.bar(category, count, color=color, label=list(categories.keys())[list(categories.values()).index(category)])

# Customize the plot labels and title
plt.xlabel('Emotion')
plt.ylabel('Frequency')
plt.title('Distribution of Emotional States at Rest (All Participants)')
plt.xticks(unique_categories, [list(categories.keys())[list(categories.values()).index(cat)] for cat in unique_categories])
plt.legend()

# Show the histogram
plt.show()

# %%
